{"version":3,"sources":["Question.js","Team.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggleSelected","bind","assertThisInitialized","handleToggleAnswer","state","selected","answer","audio","Audio","setState","prevState","console","log","play","pause","_this2","classNames","react_default","a","createElement","className","onClick","value","question","teams","map","t","name","handleAwardPoints","Component","Team","handleEditTeam","e","target","getAttribute","textContent","contenteditable","onBlur","data-value","score","App","handleLoadGame","loadGame","questions","game","team","data","currentTeam","filter","parseInt","toConsumableArray","points","correct","preventDefault","refs","url","Axios","get","then","res","_this3","displayColumn","columnid","displayArray","q","category","src_Question","id","onSubmit","type","placeholder","ref","src_Team","v","i","indexOf","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAuEeA,cApEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,qBAAuBP,EAAKO,qBAAqBC,KAA1BP,OAAAQ,EAAA,EAAAR,CAAAD,IAC5BA,EAAKU,mBAAqBV,EAAKU,mBAAmBF,KAAxBP,OAAAQ,EAAA,EAAAR,CAAAD,IAC1BA,EAAKW,MAAQ,CACXC,UAAU,EACVC,QAAQ,EACRC,MAAO,IAAIC,MAAM,iCAPHf,sFAWhBG,KAAKa,SAAS,SAACC,GAEb,MAAO,CACLL,UAAWK,EAAUL,SACrBC,QAAQI,EAAUL,UAAmBK,EAAUJ,uDAKnDV,KAAKa,SAAS,SAACC,GACb,MAAO,CACLJ,QAASI,EAAUJ,uDAKnBV,KAAKQ,MAAMC,WAAaT,KAAKQ,MAAME,QACrCK,QAAQC,IAAI,SACZhB,KAAKQ,MAAMG,MAAMM,SAGjBF,QAAQC,IAAI,SACZhB,KAAKQ,MAAMG,MAAMO,0CAKZ,IAAAC,EAAAnB,KAWDoB,EAAapB,KAAKQ,MAAMC,SAAW,oBAAsB,WAC/D,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,GAChBC,EAAAC,EAAAC,cAAA,OAAKE,QAASzB,KAAKI,sBACjBiB,EAAAC,EAAAC,cAAA,SAAIvB,KAAKJ,MAAM8B,QAGjBL,EAAAC,EAAAC,cAAA,WACGvB,KAAKQ,MAAMC,WAAaT,KAAKQ,MAAME,QAAUW,EAAAC,EAAAC,cAAA,SAAIvB,KAAKJ,MAAM+B,UAC5D3B,KAAKQ,MAAMC,WAAaT,KAAKQ,MAAME,QAAUW,EAAAC,EAAAC,cAAA,UAAQE,QAASzB,KAAKO,oBAAtB,eAC7CP,KAAKQ,MAAME,QAAUW,EAAAC,EAAAC,cAAA,KAAGE,QAASzB,KAAKO,oBAAqBP,KAAKJ,MAAMc,QACtEV,KAAKQ,MAAME,QApBIS,EAAKvB,MAAMgC,MAAMC,IAAI,SAACC,GACtC,OAAOT,EAAAC,EAAAC,cAAA,SACNO,EAAEC,KACHV,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAON,EAAKvB,MAAMoC,kBAAkBF,EAAEC,KAAMZ,EAAKvB,MAAM8B,OAAO,GAAOP,EAAKf,yBAA3F,WACAiB,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAON,EAAKvB,MAAMoC,kBAAkBF,EAAEC,KAAMZ,EAAKvB,MAAM8B,OAAO,GAAQP,EAAKf,yBAA5F,qBA7Ce6B,aCqBRC,cApBb,SAAAA,EAAYtC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IAChBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KACDuC,eAAiBtC,EAAKsC,eAAe9B,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFNA,8EAIHuC,GACbrB,QAAQC,IAAIoB,EAAEC,OAAOC,aAAa,cAAeF,EAAEC,OAAOE,aAC1DvC,KAAKJ,MAAMuC,eAAenC,KAAKJ,MAAMmC,KAAMK,EAAEC,OAAOC,aAAa,cAAeF,EAAEC,OAAOE,8CAIzF,OACElB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAChBH,EAAAC,EAAAC,cAAA,QAAMiB,gBAAgB,OAAOC,OAAQzC,KAAKmC,eAAgBO,aAAW,QAAQ1C,KAAKJ,MAAMmC,MADxF,KACsGV,EAAAC,EAAAC,cAAA,QAAMiB,gBAAgB,OAAOC,OAAQzC,KAAKmC,eAAgBO,aAAW,SAAS1C,KAAKJ,MAAM+C,eAblLV,aC0HJW,cArHb,SAAAA,EAAYhD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IAChB/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,KAAMJ,KACDoC,kBAAoBnC,EAAKmC,kBAAkB3B,KAAvBP,OAAAQ,EAAA,EAAAR,CAAAD,IACzBA,EAAKsC,eAAiBtC,EAAKsC,eAAe9B,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKgD,eAAiBhD,EAAKgD,eAAexC,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IACtBA,EAAKiD,SAAWjD,EAAKiD,SAASzC,KAAdP,OAAAQ,EAAA,EAAAR,CAAAD,IAChBA,EAAKW,MAAQ,CACXoB,MAAO,CACL,CACEG,KAAQ,QACRY,MAAS,GAEX,CACEZ,KAAQ,QACRY,MAAS,IAGbI,UAAW,GACXC,KAAM,kBAlBQnD,8EAqBHoD,EAAMvB,EAAOwB,GAC1BnC,QAAQC,IAAI,OAAQiC,EAAMvB,EAAOwB,GACjClD,KAAKa,SAAS,SAACC,GACb,IAAMqC,EAAcrC,EAAUc,MAAMwB,OAAO,SAACtB,GAAD,OAAOA,EAAEC,OAASkB,IAAM,GAOnE,MANc,UAAVvB,EACFyB,EAAYR,MAAQU,SAASH,GAEZ,SAAVxB,IACPyB,EAAYpB,KAAOmB,GAEd,CACLtB,MAAM9B,OAAAwD,EAAA,EAAAxD,CAAKgB,EAAUc,oDAITqB,EAAMM,EAAQC,GAE9BxD,KAAKa,SAAS,SAACC,GACb,IAAMqC,EAAcrC,EAAUc,MAAMwB,OAAO,SAACtB,GAAD,OAAOA,EAAEC,OAASkB,IAAM,GAGnE,OADAE,EAAYR,MAAQa,EAAUL,EAAYR,MAAQY,EAASJ,EAAYR,MAAQY,EACxE,CACL3B,MAAM9B,OAAAwD,EAAA,EAAAxD,CAAKgB,EAAUc,iDAIZQ,GACbA,EAAEqB,iBACF,IAAMT,EAAOhD,KAAK0D,KAAKV,KAAKtB,MAC5B1B,KAAKa,SAAS,CAACmC,KAAMA,IACrBhD,KAAK8C,SAASE,oCAEPW,GAAI,IAAAxC,EAAAnB,KACX4D,IAAMC,IAAIF,GAAKG,KAAK,SAACC,GACnB5C,EAAKN,SAAS,CAACkC,UAAWgB,EAAIb,KAAKH,0DAIrC/C,KAAK8C,SAAS9C,KAAKQ,MAAMwC,uCAElB,IAAAgB,EAAAhE,KAcDiE,EAAgB,SAACC,GACrB,IAAMC,EAAeH,EAAKxD,MAAMuC,UAAUlB,IAAI,SAACuC,GAC7C,GAAIA,EAAEC,WAAaH,EAEjB,OAAO7C,EAAAC,EAAAC,cAAC+C,EAAD,CAAU5C,MAAO0C,EAAE1C,MAAOC,SAAUyC,EAAEzC,SAAUjB,OAAQ0D,EAAE1D,OAAQsB,kBAAmBgC,EAAKhC,kBAAmBJ,MAAOoC,EAAKxD,MAAMoB,UAG1I,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,WAAM2C,GACLC,IAcL,OACE9C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,QAAMgD,GAAG,SAAT,YACAlD,EAAAC,EAAAC,cAAA,QAAMiD,SAAUxE,KAAK6C,gBAAgBxB,EAAAC,EAAAC,cAAA,SAAOkD,KAAK,OAAOC,YAAY,WAAWC,IAAI,SAAQtD,EAAAC,EAAAC,cAAA,4BAC3FF,EAAAC,EAAAC,cAAA,OAAKgD,GAAG,eAdUP,EAAKxD,MAAMoB,MAAMC,IAAI,SAACC,GACtC,OACET,EAAAC,EAAAC,cAACqD,EAAD,CAAM7C,KAAMD,EAAEC,KAAMY,MAAOb,EAAEa,MAAOR,eAAgB6B,EAAK7B,qBAiB7Dd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OA9CIwC,EAAKxD,MAAMuC,UAAUlB,IAAI,SAACuC,GAC3C,OAAOA,EAAEC,WAK2BjB,OAAO,SAACyB,EAAGC,EAAGxD,GAAP,OAAaA,EAAEyD,QAAQF,KAAOC,IACxCjD,IAAI,SAACmD,GACtC,OAAOf,EAAce,cAxEX/C,aCMEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.21395e47.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Question extends Component {\n  constructor(props){\n    super(props)\n    this.handleToggleSelected = this.handleToggleSelected.bind(this)\n    this.handleToggleAnswer = this.handleToggleAnswer.bind(this)\n    this.state = {\n      selected: false,\n      answer: false,\n      audio: new Audio('data/Jeopardy-theme-song.mp3')\n    }\n  }\n  handleToggleSelected(){\n    this.setState((prevState) => {\n      //const previousStateSelectedValue = prevState.selected\n      return {\n        selected: !prevState.selected,\n        answer: prevState.selected ? false : prevState.answer\n      }\n    })\n  }\n  handleToggleAnswer(){\n    this.setState((prevState) => {\n      return {\n        answer: !prevState.answer\n      }\n    })\n  }\n  componentDidUpdate(){\n    if (this.state.selected && !this.state.answer){\n      console.log(\"test1\")\n      this.state.audio.play();\n    }\n    else{\n      console.log(\"test2\")\n      this.state.audio.pause();\n    }\n\n\n  }\n  render() {\n    const awardToTeamDisplay = () => {\n      const teamArray = this.props.teams.map((t) => {\n        return <p>\n        {t.name}\n        <button onClick={() => {this.props.handleAwardPoints(t.name, this.props.value, true); this.handleToggleSelected()}}>Correct</button>\n        <button onClick={() => {this.props.handleAwardPoints(t.name, this.props.value, false); this.handleToggleSelected()}}>Wrong</button>\n        </p>\n      })\n      return teamArray\n    }\n    const classNames = this.state.selected ? \"question selected\" : \"question\"\n    return (\n      <div className={classNames}>\n      <div onClick={this.handleToggleSelected}>\n        <p>{this.props.value}</p>\n\n      </div>\n      <div>\n        {this.state.selected && !this.state.answer && <p>{this.props.question}</p>}\n        {this.state.selected && !this.state.answer && <button onClick={this.handleToggleAnswer}>Show Answer</button>}\n        {this.state.answer && <p onClick={this.handleToggleAnswer}>{this.props.answer}</p>}\n        {this.state.answer && awardToTeamDisplay()}\n\n        </div>\n        </div>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from 'react';\n\nclass Team extends Component {\n  constructor(props){\n    super(props)\n    this.handleEditTeam = this.handleEditTeam.bind(this)\n  }\n  handleEditTeam(e){\n    console.log(e.target.getAttribute(\"data-value\"), e.target.textContent)\n    this.props.handleEditTeam(this.props.name, e.target.getAttribute(\"data-value\"), e.target.textContent)\n  }\n  render() {\n\n    return (\n      <span className=\"team\">\n      <span contenteditable=\"true\" onBlur={this.handleEditTeam} data-value=\"team\">{this.props.name}</span>: <span contenteditable=\"true\" onBlur={this.handleEditTeam} data-value=\"score\">{this.props.score}</span>\n      </span>\n\n\n    );\n  }\n}\n\nexport default Team;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport Question from './Question';\nimport Team from './Team';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.handleAwardPoints = this.handleAwardPoints.bind(this)\n    this.handleEditTeam = this.handleEditTeam.bind(this)\n    this.handleLoadGame = this.handleLoadGame.bind(this)\n    this.loadGame = this.loadGame.bind(this)\n    this.state = {\n      teams: [\n        {\n          \"name\": \"team1\",\n          \"score\": 0,\n        },\n        {\n          \"name\": \"team2\",\n          \"score\": 0,\n        }\n      ],\n      questions: [],\n      game: \"data/test.json\"\n    }\n  }\n  handleEditTeam(team, value, data){\n    console.log(\"test\", team, value, data)\n    this.setState((prevState) => {\n      const currentTeam = prevState.teams.filter((t) => t.name === team)[0]\n      if (value === \"score\"){\n        currentTeam.score = parseInt(data)\n      }\n      else if (value === \"team\"){\n        currentTeam.name = data\n      }\n      return {\n        teams: [...prevState.teams]\n      }\n    })\n  }\n  handleAwardPoints(team, points, correct){\n\n    this.setState((prevState) => {\n      const currentTeam = prevState.teams.filter((t) => t.name === team)[0]\n\n      currentTeam.score = correct ? currentTeam.score + points : currentTeam.score - points\n      return {\n        teams: [...prevState.teams]\n      }\n    })\n  }\n  handleLoadGame(e){\n    e.preventDefault();\n    const game = this.refs.game.value\n    this.setState({game: game})\n    this.loadGame(game)\n  }\n  loadGame(url){\n    Axios.get(url).then((res) => {\n      this.setState({questions: res.data.questions})\n    });\n  }\n  componentDidMount(){\n    this.loadGame(this.state.game)\n  }\n  render() {\n    const displayAllColumns = () => {\n      const categories = this.state.questions.map((q) => {\n        return q.category\n      })\n      //filter for unique values only, checks to see if the index of the value is the first occuring\n      //https://stackoverflow.com/questions/1960473/get-all-unique-values-in-a-javascript-array-remove-duplicates\n      // v = value, i= index, a = self/array\n      const filteredCategories = categories.filter((v, i, a) => a.indexOf(v) === i);\n      const columns = filteredCategories.map((c) => {\n        return displayColumn(c)\n      })\n      return columns\n    }\n    const displayColumn = (columnid) => {\n      const displayArray = this.state.questions.map((q) => {\n        if (q.category === columnid)\n        {\n          return <Question value={q.value} question={q.question} answer={q.answer} handleAwardPoints={this.handleAwardPoints} teams={this.state.teams}/>\n        }\n      })\n      return (\n        <div className=\"column\">\n        <div>{columnid}</div>\n        {displayArray}\n        </div>\n      )\n    }\n    const displayTeamScores = () => {\n      const teamArray = this.state.teams.map((t) => {\n        return (\n          <Team name={t.name} score={t.score} handleEditTeam={this.handleEditTeam}/>\n\n\n        )\n      })\n      return teamArray\n    }\n    return (\n      <div>\n      <div className=\"header\">\n      <span id=\"title\">Jeopardy</span>\n      <form onSubmit={this.handleLoadGame}><input type=\"text\" placeholder=\"game url\" ref=\"game\"/><button>Load Game</button></form>\n      <div id=\"teamWrapper\">\n      {displayTeamScores()}\n      </div>\n\n      </div>\n      <div className=\"App\">\n      {displayAllColumns()}\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}